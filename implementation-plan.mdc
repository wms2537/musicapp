---
description:
globs:
alwaysApply: false
---
# Implementation Plan for MusicApp Features

## Feature Checklist

- [x] 1. 调节上一曲和下一曲 (Previous/Next Track) (15%)
- [x] 2. 多种倍速播放【0.5，1，1.5，2 倍速】(Playback Speed Control) (25%)
- [x] 3. 快进快退【快进 10s，快退 10s】(Seek Forward/Backward) (20%)
- [x] 4. 暂停继续 (Pause/Resume) (10%)
- [x] 5. 日志输出 (Logging Output) (15%)

## Detailed Steps

### 1. Pause/Resume Functionality
- Add a global state variable `playback_paused`.
- Modify the main loop to check this state.
- Use `snd_pcm_pause()` to pause and resume ALSA playback.
- Assign a key (e.g., 'p') for toggling pause/resume.
- *Done*
  - Summary: Added `playback_paused` global boolean. Modified the main playback loop to check for 'p' key input. Used `snd_pcm_pause(pcm_handle, 1)` for pause and `snd_pcm_pause(pcm_handle, 0)` for resume. Added a short `usleep` during pause to reduce CPU load.

### 2. Seek Forward/Backward Functionality
- Define seek duration (e.g., 10 seconds).
- Add key bindings (e.g., 'f' for forward, 'b' for backward).
- Implement `fseek()` on the music file pointer `fp`.
- Calculate seek offset using `wav_header.byte_rate`.
- Consider ALSA buffer state after seeking (e.g., `snd_pcm_drop()` or `snd_pcm_prepare()`).
- *Done*
  - Summary: Added handling for 'f' (forward) and 'b' (backward) keys. Used `fseek(fp, offset, SEEK_CUR)` with `offset = +/- 10 * wav_header.byte_rate`. For backward seek, if it fails (e.g., trying to seek before file start), it seeks to the beginning of audio data (after WAV header). Noted that ALSA buffer might need reset for smoother seeking, but this is left as an optional improvement for now.

### 3. Previous/Next Track Functionality
- Modify `main()` to accept a list of music files or a playlist file.
- Store the list of tracks and the current track index.
- Implement functions `play_next_track()` and `play_previous_track()`.
- These functions will close the current file, open the new file, and re-initialize playback if necessary.
- Add key bindings (e.g., 'N' for next, 'P' for previous - distinct from 'p' for pause).
- *Done*
  - Summary: Modified `main` to accept multiple filenames as non-option arguments. Added `music_files` array, `num_music_files`, `current_track_idx` globals. Created `load_track()` to handle opening new files. Implemented '.' (next) and ',' (previous) key controls. Added auto-play to the next track upon current track completion. The `-m` option is now deprecated. Memory for `music_files` is allocated and freed. Noted that robust ALSA re-initialization between tracks with different audio parameters might be needed.

### 4. Playback Speed Control
- Research ALSA capabilities for playback speed adjustment (e.g., `snd_pcm_sw_params_set_rate_resample` or software resampling).
- Add a global variable for current speed multiplier (0.5, 1.0, 1.5, 2.0).
- Add key bindings to cycle through speeds.
- Implement changes to ALSA parameters or data processing pipeline. This might involve recalculating buffer sizes or sample rates dynamically.
- *Done*
  - Summary: Implemented playback speed control for factors 0.5x, 1.0x, 1.5x, and 2.0x using '[' and ']' keys. The core logic involves software resampling (sample duplication/dropping) of the audio data from the input buffer (`buff`) into a temporary dynamically allocated buffer (`buffer_for_alsa`) before sending it to `snd_pcm_writei`. The amount of data read from the file per iteration remains the same, but the data written to ALSA is adjusted to achieve the desired speed. Error handling for memory allocation of the temporary buffer is included, with a fallback to normal speed for the current chunk if allocation fails. Logging calls were updated to use `app_log`.

### 5. Logging Output
- Review existing `printf` statements.
- Enhance logging for new features (state changes, errors, actions).
- Consider adding a log level or a way to toggle verbose logging if needed.
- If complex, consider writing logs to a file.
- *Done*
  - Summary: Standardized logging to use the `app_log` function throughout the application, including for the newly implemented playback speed functionality and for previously modified features. This provides consistent log formatting with timestamps and log types (INFO, ERROR, WARNING). Replaced direct `fprintf(stderr, ...)` and `printf(...)` calls for logging purposes with `app_log`.

### General
- Update README.md with new features and controls.
- *Done*
  - Summary: Created a `README.md` file. It includes sections for Features, Compilation, Usage (command-line options and interactive controls), Dependencies, and Known Issues/Future Work. It highlights that playback speed audio processing is not yet implemented.
- Ensure error handling is robust for all new functionalities.
- *Partially Done*
  - Summary: Basic error handling (e.g., for file operations, memory allocation, ALSA calls) exists. Some new error messages were added. However, a comprehensive review and enhancement of error handling across all new features, especially for edge cases and recovery, would be a larger task and is considered partially addressed by the logging improvements and specific checks added.

# Implementation Plan

This document tracks the implementation of features and major changes in the MusicApp project.

## Feature: Playback Speed Control

-   **Status**: In Progress
-   **Details**: Implement variable playback speed for audio files.
    -   Allow users to increase or decrease playback speed using '[' and ']' keys.
    -   Modify audio processing loop to resample audio data based on selected speed factor.

## Equalizer Feature (FIR Filter)

1.  **Define FIR Filter Structures and Coefficients**:
    *   Define a structure for FIR filter parameters (coefficients, length).
    *   Define at least three sets of FIR coefficients for different equalizer modes (e.g., Normal/Flat, Bass Boost, Treble Boost). This will likely be in `const.h`.
    *   Status: Done
    *   Summary: Added `FIRFilter` typedef and `MAX_FIR_TAPS` to `const.h`. Defined `FIR_NORMAL`, `FIR_BASS_BOOST`, and `FIR_TREBLE_BOOST` with placeholder coefficients.

2.  **Implement FIR Filter Application Function**:
    *   Create a function `apply_fir_filter(short *input_buffer, short *output_buffer, int num_samples, FIRFilter *filter)` that applies the FIR filter to a block of audio samples. This function will handle sample-by-sample convolution. Ensure it correctly handles buffer boundaries and filter history if needed (though simple FIR might not require extensive history between calls if buffers are processed independently).
    *   Status: Done
    *   Summary: Implemented `apply_fir_filter` in `MusicApp.c` with support for sample history (`fir_history`) for continuous filtering across buffers. Added `initialize_fir_history`.

3.  **Integrate Equalizer into `MusicApp.c`**:
    *   Add global variables to store the current FIR filter/equalizer mode and an array of available `FIRFilter` structures.
    *   Modify the main audio processing loop in `MusicApp.c`:
        *   After reading audio data into `buff` and before playback speed adjustment, convert samples to `short` if they aren't already (assuming 16-bit audio for FIR processing, which is common).
        *   Apply the selected FIR filter using `apply_fir_filter`.
        *   Convert processed samples back to `unsigned char *` if needed for ALSA.
    *   Status: Done
    *   Summary: Added `EQ_PRESETS`, `NUM_EQ_PRESETS`, and `current_eq_idx` globals. Integrated `apply_fir_filter` into the main loop, processing S16_LE audio. Handles memory for EQ buffer and passes filtered audio to speed adjustment or ALSA.

4.  **Add User Controls for Equalizer**:
    *   Assign new keyboard characters (e.g., '1', '2', '3') to switch between equalizer modes.
    *   Update the help message and `app_log` to inform the user about the new controls.
    *   Status: Done
    *   Summary: Added input handling for '1', '2', '3' to change `current_eq_idx` and re-initialize FIR history. Updated `app_log` message with new controls.

5.  **Testing and Refinement**:
    *   Test with various audio files and equalizer settings.
    *   Adjust FIR coefficients if necessary to achieve desired audio effects.
    *   Profile if performance issues arise, though a reasonably sized FIR filter should be manageable.
    *   Status: Pending User Action
    *   Summary: User needs to compile, test with audio, and potentially refine FIR coefficients in `const.h` for desired sound. The current coefficients are placeholders.

6.  **Update Documentation**:
    *   Update `README.md` to explain the equalizer feature, available modes, and how to control it.
    *   Status: Done
    *   Summary: Updated `README.md` with details on the equalizer feature, controls (1, 2, 3), and a note about the placeholder nature of the current FIR coefficients.
